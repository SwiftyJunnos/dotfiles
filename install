#!/usr/bin/env bash

print_info() {
  printf "\033[0;32m==> %s\033[0m\n" "$*"
}

print_error() {
    printf "\033[0;31m%s\033[0m\n" "$*" >&2
    exit 1
}

# -e: exit on error
# -u: exit on undefined variable
set -eu

# Install 1password before chezmoi
print_info "Installing 1Password-cli before chezmoi configuration..."
type password-manager-binary >/dev/null 2>&1 && exit

if ! op="$(command -v op)"; then
    case "$(uname -s)" in
        "Darwin")
            # commands to install password-manager-binary on Darwin
            which -a brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            (echo; echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"') >> /home/work/.bashrc
            eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
            brew="$(brew --prefix)/bin/brew"
            $brew --version

            $brew install cask "1password"
            $brew install cask "1password-cli"
            ;;
        "Linux")
            # commands to install password-manager-binary on Linux
            ARCH="amd64" && \
            wget "https://cache.agilebits.com/dist/1P/op2/pkg/v2.30.0/op_linux_${ARCH}_v2.30.0.zip" -O op.zip && \
            unzip -d op op.zip && \
            sudo mv op/op /usr/local/bin/ && \
            rm -r op.zip op && \
            sudo groupadd -f onepassword-cli && \
            sudo chgrp onepassword-cli /usr/local/bin/op && \
            sudo chmod g+s /usr/local/bin/op
            ;;
        *)
            print_error "unsupported OS"
            exit 1
            ;;
    esac
fi

if ! command -v git >/dev/null; then
    print_info "Installing setup dependency"
    if command -v sudo >/dev/null; then
        sudo apt update && sudo apt install git -y
    else
        apt update && apt install git -y
    fi
fi

if ! chezmoi="$(command -v chezmoi)"; then
    # check current os
    os=$(uname -s)

    case $os in
        "Darwin")
            if command -v brew >/dev/null; then
                bin_dir="$(brew --prefix)/bin"
                chezmoi="${bin_dir}/chezmoi"
                print_info "Installing chezmoi via 🍺 Homebrew to ${chezmoi}"
                sh -c "brew install chezmoi"
            else
                print_error "To install chezmoi, you must have Homebrew installed first."
            fi
            ;;
        "Linux")
            if [ -f "/etc/lsb-release" ] && grep -q "Ubuntu" "/etc/lsb-release"; then
                bin_dir="${HOME}/.local/bin"
                chezmoi="${bin_dir}/chezmoi"
                print_info "Installing chezmoi to ${chezmoi}"
                if command -v curl >/dev/null; then
                    sh -c "$(curl -fsSL get.chezmoi.io)" -- -b "$bin_dir"
                elif command -v wget >/dev/null; then
                    sh -c "$(wget -qO- get.chezmoi.io)" -- -b "$bin_dir"
                else
                    print_error "To install chezmoi, you must have curl or wget installed."
                fi
            else
                print_error "This script only supports Ubuntu for Linux systems."
            fi
            ;;
        *)
            print_error "This script only supports macOS and Ubuntu."
            ;;
    esac
    unset bin_dir
else
    print_info "chezmoi already installed. Continuing to initialization."
fi

# Current directory where script is running
print_info "Enter your GitHub username to fetch chezmoi setups [default: SwiftyJunnos]: "
read -r username

name=${username:-SwiftyJunnos}

extra_args="--apply"

{
    exec "${chezmoi}" init ${extra_args} ${name}
    print_info "chezmoi initialized at $(${chezmoi} source-path)"
} || {
    print_error "chezmoi initialization failed."
}
